#' Evaluate Prediction Accuracy
#'
#' Computes various metrics to evaluate the accuracy of predicted values against actual observations.
#' The function supports evaluations both on original and logarithmically transformed scales. Metrics
#' include Root Mean Square Error (RMSE), Mean Absolute Error (MAE), Root Mean Square Percentage Error
#' (RMSPE), Mean Absolute Percentage Error (MAPE), and the correlation (CORR) between predicted and actual
#' values.
#'
#' @param y_fitted Numeric vector of predicted (fitted) values.
#' @param y Numeric vector of actual observed values.
#' @param IF_log Logical flag indicating if the values have been logarithmically transformed before prediction.
#'               If `TRUE`, the function will first apply an inverse transformation. Default is `FALSE`.
#'
#' @return A data frame with a single row containing the calculated metrics: RMSE, MAE, RMSPE, MAPE, and CORR.
#'
#' @examples
#' # Assuming `fitted_values` and `actual_values` are your vectors of predicted and actual values
#' performance_metrics <- get_Measurement(fitted_values, actual_values)
#' @export

get_Measurement <- function(y_fitted, y , IF_log = F){
  # This function is to get the measurement by giving
  # the fitted(predicted) value and the real value
  # Unscale the value first

  if(IF_log == T){
    case <- exp(y) - 1; case_fitted <- exp(y_fitted) - 1
  }else{
    case <- y ; case_fitted <- y_fitted
  }

  n <- length(case)
  M <- as.data.frame(matrix(0, nrow = 1, ncol = 5))
  names(M) <- c("RMSE", "MAE", "RMSPE", "MAPE", "CORR")

  M[1,1] <- sqrt(mean((case_fitted - case) ^ 2))
  M[1,2] <- mean(abs(case_fitted - case))
  M[1,3] <- sqrt(mean(((case_fitted - case) / case) ^ 2))
  M[1,4] <- mean(abs((case_fitted - case) / case))
  M[1,5] <- cor(case_fitted, case, method="kendall")

  return(M)
}
