#' Get the X Matrix for Model Fitting
#'
#' This function generates the X matrix required for fitting prediction models by processing case and/or Google Trends (GT) data.
#' It standardizes case data, converts it to the specified prediction unit, generates lagged data, and can apply a logarithmic
#' transformation to Google Trends data with an offset to avoid log of zero.
#'
#' @param start The start date for generating the X matrix, in "YYYY-MM-DD" format.
#' @param end The end date for generating the X matrix, in "YYYY-MM-DD" format.
#' @param case An optional data frame of case data, with a date variable named "date" and a Dengue case variable named "N_cases".
#'             If NULL, no case data will be used.
#' @param GT An optional data frame of Google Trends data. If NULL, no Google Trends data will be used.
#' @param lags A numeric vector specifying the lags to apply when generating the lagged case data.
#'             The default setting is c(1:12, 24), which corresponds to ARGO model's settings.
#' @param pred_unit A string that specifies the prediction unit ("W" for weekly or "M" for monthly).
#'                  The default value "M" indicates monthly data.
#' @param offset_GT A small positive numeric value added to the Google Trends data to avoid taking the logarithm of zero.
#'                  The default value is 0.001.
#'
#' @return A matrix X used for fitting the specified model which includes lagged case data and/or transformed Google Trends data,
#'         depending on the input.
#' @examples
#' get_X("2020-01-01", "2020-12-31", case_data, GT_data, lags = c(1:12, 24), pred_unit = "M", offset_GT = 0.001)
#' @export
get_X <- function(start,
                  end,
                  case = NULL,
                  GT = NULL,
                  lags = c(1:12,24), # ARGO's setting
                  pred_unit = "M",
                  offset_GT = 0.001){
  # This function is to get the X matrix according to
  # the need of different models
  null_GT <- is.null(GT); null_case <- is.null(case)
  if(null_GT & null_case){
    stop("Error! Please input at least one valid dataset.")
  }

  if(!null_case){
    # Standardize the variables for "case" data
    colnames(case) <- c("date","N_cases")
    if(pred_unit == "M"){
      # Convert the default weekly cases into Monthly
      case <- from_Week_to_Month(case)
    }

    # Get the case lag data
    case_lag <- NULL
    for (i in seq_along(lags)) {
      # Generate the data
      generated_data <- lag_Gen(case, start, end, lags[i])

      # Initialise the dafa frame
      if (i == 1) {
        case_lag <- as.data.frame(generated_data)
        colnames(case_lag) <- paste0("lag_", lags[i])
      } else {
        # Paste it to the data frame
        case_lag[paste0("lag_", lags[i])] <- generated_data
      }
    }
  }

  if(!null_GT){
    # Number of queries
    query_num <- length(GT)
    # Filtering the data by Time
    GT_out <-GT %>% mutate(Time_new = as.Date(paste0(Time, "-15"))) %>%
      filter(Time_new >= start_d & Time_new <= end_d) %>%
      mutate(across(2:query_num, as.numeric),
             across(2:query_num, ~log(.x + offset_GT)))
  }

  if(!null_GT & !null_case){
    X <- as.matrix(cbind(case_lag,GT_out[,2:query_num]))
  }else if(!null_case){
    X <- as.matrix(case_lag)
  }else{
    X <- as.matrix(GT_out[,2:query_num])
  }

  # Return the X
  return(X)
}
